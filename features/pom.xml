<?xml version="1.0" encoding="UTF-8"?>
<!--

    ==========================================================================================
    =                   JAHIA'S DUAL LICENSING - IMPORTANT INFORMATION                       =
    ==========================================================================================

                                    http://www.jahia.com

        Copyright (C) 2002-2025 Jahia Solutions Group SA. All rights reserved.

        THIS FILE IS AVAILABLE UNDER TWO DIFFERENT LICENSES:
        1/Apache2 OR 2/JSEL

        1/ Apache2
        ==================================================================================

        Copyright (C) 2002-2025 Jahia Solutions Group SA. All rights reserved.

        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.


        2/ JSEL - Commercial and Supported Versions of the program
        ===================================================================================

        IF YOU DECIDE TO CHOOSE THE JSEL LICENSE, YOU MUST COMPLY WITH THE FOLLOWING TERMS:

        Alternatively, commercial and supported versions of the program - also known as
        Enterprise Distributions - must be used in accordance with the terms and conditions
        contained in a separate written agreement between you and Jahia Solutions Group SA.

        If you are unsure which license is appropriate for your use,
        please contact the sales department at sales@jahia.com.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>org.jahia.server</groupId>
        <artifactId>jahia-root</artifactId>
        <version>8.2.3.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.jahia.features</groupId>
    <artifactId>jahia-features</artifactId>
    <name>Jahia OSGi Features</name>
    <packaging>pom</packaging>

    <modules>
        <module>gemini-blueprint</module>
        <module>core</module>
        <module>jackson</module>
        <module>graphql</module>
        <module>jax-rs</module>
        <module>standard</module>
    </modules>

    <build>
        <pluginManagement>
            <plugins>
                <!--
                  Workaround: Manually set the main artifact for Karaf feature modules.

                  The 'karaf-maven-plugin' does not assign the generated 'feature.xml' as the main artifact
                  when using <packaging>feature</packaging>. This leads to build failures with errors like:

                    [ERROR] Failed to execute goal org.apache.maven.plugins:maven-install-plugin:3.0.0-M1:install (default-install) on project <project_name>:
                    NoFileAssignedException: The packaging plugin for this project did not assign a main file to the project but it has attachments.
                    Change packaging to 'pom'.

                  Refer to the Karaf issue tracker for more details:
                  https://issues.apache.org/jira/browse/KARAF-7734

                  Alternative approaches considered:
                  - Using 'build-helper-maven-plugin' to attach the artifact: Did not resolve the issue.
                  - Configuring 'maven-install-plugin' with <allowIncompleteProjects>true</allowIncompleteProjects>: Suppresses the error but generates warnings.

                  Previously, we used <packaging>kar</packaging>, which packaged the feature and its dependencies into a .kar file, automatically set as the main artifact.
                  However, we moved away from .kar files to avoid storing large binaries in our Maven repository.

                  Current solution:
                  Utilize 'gmavenplus-plugin' to execute a Groovy script during the 'package' phase, explicitly setting the 'feature.xml' as the main artifact.
                  This ensures compatibility with Maven's expectations and avoids build issues.

                  Note: The 'karaf-maven-plugin' has known reliability issues, and many developers opt for manually managing 'feature.xml' files.
                  Consider this approach if further complications arise.
                -->
                <plugin>
                    <groupId>org.codehaus.gmavenplus</groupId>
                    <artifactId>gmavenplus-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>set-main-artifact</id>
                            <phase>package</phase>
                            <goals>
                                <goal>execute</goal>
                            </goals>
                            <configuration>
                                <scripts>
                                    <script>
                                        import java.io.File
                                        def file = new File(project.build.directory + "/feature/feature.xml")
                                        if (!file.exists()) {
                                            throw new FileNotFoundException("Feature file not found: " + file)
                                        }
                                        project.artifact.file = file
                                        log.info "Main artifact set to: ${file.absolutePath}"
                                    </script>
                                </scripts>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.karaf.tooling</groupId>
                <artifactId>karaf-maven-plugin</artifactId>
                <extensions>true</extensions>
                <configuration>
                    <startLevel>30</startLevel>
                    <enableGeneration>true</enableGeneration>
                    <includeTransitiveDependency>false</includeTransitiveDependency>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
