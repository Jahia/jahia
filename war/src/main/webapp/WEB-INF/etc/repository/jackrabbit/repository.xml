<?xml version="1.0"?>
<!DOCTYPE Repository PUBLIC "-//The Apache Software Foundation//DTD Jackrabbit 2.0//EN"
                            "http://jackrabbit.apache.org/dtd/repository-2.0.dtd">
<Repository>

    <DataSources>
        <DataSource name="jahiaDS">
            <param name="driver" value="javax.naming.InitialContext"/>
            <param name="url" value="java:comp/env/jdbc/jahia"/>
            <param name="databaseType" value="@SCHEMA@"/>
        </DataSource>
    </DataSources>

    <!--
        virtual file system where the repository stores global state
        (e.g. registered namespaces, custom node types, etc.)
    -->

    <FileSystem class="@FILESYSTEM_CLASS@">
        <param name="dataSourceName" value="jahiaDS" />
        <param name="schemaObjectPrefix" value="jr_fsg_"/>
        <param name="schemaCheckEnabled" value="false"/>
    </FileSystem>

    <!--
        security configuration
    -->
    <Security appName="Jackrabbit">

        <SecurityManager class="org.apache.jackrabbit.core.security.JahiaSecurityManager">
        </SecurityManager>
        <!--
            access manager:
            class: FQN of class implementing the AccessManager interface
        -->
        <AccessManager class="org.apache.jackrabbit.core.security.JahiaAccessManager">
        </AccessManager>

        <LoginModule class="org.apache.jackrabbit.core.security.JahiaLoginModule">
        </LoginModule>
    </Security>
    <!--
        location of workspaces root directory and name of default workspace
    -->
    <Workspaces rootPath="${rep.home}/workspaces" defaultWorkspace="default"/>
    <!--
        workspace configuration template:
        used to create the initial workspace if there's no workspace yet
    -->
    <Workspace name="${wsp.name}">

        <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
            <param name="path" value="${wsp.home}"/>
        </FileSystem>

        <PersistenceManager class="@PERSISTENCE_CLASS@">
            <param name="dataSourceName" value="jahiaDS" />
            <param name="schemaObjectPrefix" value="jr_${wsp.name}_"/>
            <param name="schemaCheckEnabled" value="false"/>
            
            <param name="consistencyCheck" value="${jahia.jackrabbit.consistencyCheck}"/>
            <param name="consistencyFix" value="${jahia.jackrabbit.consistencyFix}"/>

            <!-- By default the bundle cache size is at 8MB. If you see a lot of messages indicating high miss count as
            in the following example :
            BundleCache: num=2860 mem=8189k max=8192k avg=2932 hits=12'217'232 miss=5'802'768
            You should increase the bundle cache size. The value is in MB. -->
            <param name="bundleCacheSize" value="${jahia.jackrabbit.bundleCacheSize.workspace.${wsp.name}:96}" />
        </PersistenceManager>

        <SearchIndex class="org.apache.jackrabbit.core.query.lucene.JahiaSearchIndex">
            <param name="path" value="${wsp.home}/index"/>
            <param name="analyzer" value="org.jahia.services.search.analyzer.EnglishSnowballAnalyzer"/>
            <param name="supportHighlighting" value="true"/>
            <param name="excerptProviderClass" value="org.jahia.services.search.jcr.HTMLExcerpt"/>
            <param name="indexingConfiguration" value="${jahia.jackrabbit.searchIndex.workspace.config}"/>
            <param name="indexingConfigurationClass" value="org.apache.jackrabbit.core.query.lucene.JahiaIndexingConfigurationImpl"/>            
            <param name="spellCheckerClass" value="${jahia.jackrabbit.searchIndex.spellChecker.spellCheckerClass}"/>

            <!-- This next parameter allows to specify that we want to limit the initially loaded result size -->
            <param name="resultFetchSize" value="100"/>

            <!-- The maxClauseCount setting will need to be increased to perform queries on large sub-trees -->
            <param name="maxClauseCount" value="65000" />

            <!-- Increase the cache size if the doc number cache hits are below 90% -->
            <!--param name="cacheSize" value="100000" /-->
            
            <param name="onWorkspaceInconsistency" value="${jahia.jackrabbit.onWorkspaceInconsistency}"/>
            <param name="enableConsistencyCheck" value="${jahia.jackrabbit.searchIndex.enableConsistencyCheck}"/>
            <param name="forceConsistencyCheck" value="${jahia.jackrabbit.searchIndex.forceConsistencyCheck}"/>
            <param name="autoRepair" value="${jahia.jackrabbit.searchIndex.autoRepair}"/>

            <param name="typesUsingOptimizedACEIndexation" value="nt:file"/>
        </SearchIndex>

        <ISMLocking class="${jahia.jackrabbit.ismLocking}"/>

        <NodeTypeInstanceHandler class="org.apache.jackrabbit.core.JahiaNodeTypeInstanceHandlerFactory">

        </NodeTypeInstanceHandler>
    </Workspace>

    <Cluster id="${cluster.node.serverId}">
   		<Journal class="@JOURNAL_CLASS@">
               <param name="dataSourceName" value="jahiaDS" />
               <param name="revision" value="${rep.home}/revisionNode"/>
               <param name="janitorEnabled" value="${processingServer}"/>
               <param name="schemaObjectPrefix" value="jr_j_"/>
               <param name="schemaCheckEnabled" value="false"/>
    	</Journal>
 	</Cluster>

    <!--
        Configures the versioning
    -->
    <Versioning rootPath="${rep.home}/version">        
        <!--
            Configures the filesystem to use for versioning for the respective
            persistence manager
        -->
        <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
            <param name="path" value="${rep.home}/version" />
        </FileSystem>

        <!--
            Configures the persistence manager to be used for persisting version state.
            Please note that the current versioning implementation is based on
            a 'normal' persistence manager, but this could change in future
            implementations.
        -->
		<PersistenceManager class="@PERSISTENCE_CLASS@">
 		  <param name="dataSourceName" value="jahiaDS" />
		  <param name="schemaObjectPrefix" value="jr_v_"/>
          <param name="schemaCheckEnabled" value="false"/>
          
          <param name="bundleCacheSize" value="${jahia.jackrabbit.bundleCacheSize.versioning:24}" />
          
          <param name="consistencyCheck" value="${jahia.jackrabbit.consistencyCheck}"/>
          <param name="consistencyFix" value="${jahia.jackrabbit.consistencyFix}"/>
		</PersistenceManager>

        <ISMLocking class="${jahia.jackrabbit.ismLocking}"/>
    </Versioning>

    <!--
        Search index for content that is shared repository wide
        (/jcr:system tree, contains mainly versions)
    -->
    <SearchIndex class="org.apache.jackrabbit.core.query.lucene.JahiaSearchIndex">
        <param name="path" value="${rep.home}/index"/>
        <param name="indexingConfiguration" value="${jahia.jackrabbit.searchIndex.versioning.config}"/>
        
        <param name="onWorkspaceInconsistency" value="${jahia.jackrabbit.onWorkspaceInconsistency}"/>
        <param name="enableConsistencyCheck" value="${jahia.jackrabbit.searchIndex.enableConsistencyCheck}"/>
        <param name="forceConsistencyCheck" value="${jahia.jackrabbit.searchIndex.forceConsistencyCheck}"/>
        <param name="autoRepair" value="${jahia.jackrabbit.searchIndex.autoRepair}"/>
    </SearchIndex>

    <DataStore class="org.apache.jackrabbit.core.data.FileDataStore">
        <param name="path" value="${jahia.jackrabbit.datastore.path}"/>
        <param name="minRecordLength" value="1024"/>
    </DataStore>

    <DataStore class="org.apache.jackrabbit.core.data.db.DbDataStore">
        <param name="dataSourceName" value="jahiaDS" />
        <param name="schemaObjectPrefix" value="JR_"/>
        <param name="schemaCheckEnabled" value="false"/>
        <param name="copyWhenReading" value="true"/>
        <param name="minRecordLength" value="1024"/>
    </DataStore>

    <DataStore class="org.jahia.services.content.impl.jackrabbit.S3DataStore"/>
</Repository>
