package org.jahia.services.content.rules

// list any import classes here
import org.jahia.services.content.rules.*
import org.jahia.services.content.*
import javax.jcr.observation.Event
import org.slf4j.Logger
import org.apache.jackrabbit.core.security.JahiaAccessManager;
import org.jahia.services.usermanager.JahiaGroupManagerService;
import org.jahia.services.sites.JahiaSitesService;


expander rules.dsl

// declare any global variables here
global User user
global Service service
global ImageService imageService
global ExtractionService extractionService
global RulesNotificationService notificationService
global Logger logger
global JCRStoreProvider provider

rule "Import file"
    salience 50
    when
        A new node is created
        The node has a parent
             - it has the extension type jnt:importDropBox
    then
        Import the node
        Log "Import file fired for node " + node.getPath()
end

rule "Profile Image update"
    salience 25
    when
        A property j:picture has been set on a node
             - the node has the type jnt:user
             - not in operation import
    then
        Create a square thumbnail on reference "avatar_120" of size 120
        Create a square thumbnail on reference "avatar_60" of size 60
end

rule "Profile Image publication"
    salience 10
    when
        A property j:picture has been set on a node
             - the node has the type jnt:user
    then
        Publish user profile picture node.getProperty("j:picture").getNodeValue()
end

rule "Move subnodes to split folder"
    salience 100
    when
        The type jmix:autoSplitFolders has been assigned to a node
            - not in operation import
    then
        Move subnodes of node to split folder
end

rule "Move to split folder"
    salience 100
    when
        A new node is created
            - the parent has the type jmix:autoSplitFolders
            - not in operation import
    then
        Move to split folder node
end

rule "notify user (create)"
    when
       A new node is created
		- the node has the type jnt:user
		- its name is not guest
		- its name is not root
    then
        Notify new user with mail template "/WEB-INF/notifications/templates/mail/newUser.vm"
end

rule "User password is set"
    when
        A property j:password has been set on a node
			- the node has the type jnt:user
    then
        Store password history for user node
end

rule "Create permission for template"
    when
        A new node is created
            - the node has the type jnt:pageTemplate
    then
        Create a permission in node.getNode().getAncestor(3).getPath() + "/permissions/templates" named "template-" + node.getName()
end

rule "Create dependency on module"
    when
        A property j:dependencies has been set on a node
			- the node has the type jnt:moduleVersion
    then
        Update dependencies for module
end

rule "Flush user cache when adding user"
    when
        A new node is created
			- the node has the type jnt:user
    then
        Flush user cache for node
end

rule "Flush user cache when removing user"
    when
        A node is deleted
        The node has a parent
            - the parent has the type jnt:usersFolder
    then
        Flush user cache for node
end

rule "Flush group cache when adding group"
    when
        A new node is created
			- the node has the type jnt:group
    then
        Flush group cache for node
end

rule "Flush group cache when removing group"
    when
        A node is deleted
        The node has a parent
            - the parent has the type jnt:groupsFolder
    then
        Flush group cache for node
end

rule "Flush group membership cache when adding member"
    when
        A new node is created
			- the node has the type jnt:member
    then
        Flush group membership cache for node
end

rule "Flush group membership cache when removing member"
    when
        A node is deleted
        The node has a parent
            - the parent has the type jnt:members
    then
        Flush group membership cache for node
end

rule "Clear site cache when updated"
    when
		A property has been set on a node
			- the node has the type jnt:virtualsite
    then
>       service.updateSite(node);
>       JahiaSitesService.flushSitesInternalCaches();
end

rule "Update language availability on system site"
    when
		A property has been set on a node
			- the node has the type jnt:virtualsite
    then
>       service.updateSystemSiteLanguages(node, drools);
end

rule "Flush URL resolver cache"
    when
>       property : ChangedPropertyFact ( propertyName : name == "j:languages" || name == 'j:inactiveLiveLanguages' || name =='j:inactiveLanguages', propertyValue : stringValues , node : node, node.types contains "jnt:virtualsite" )
    then
        Flush urlResolverNodePath
        Flush urlResolverSiteInfo
end

rule "Flush privileges in role cache on role update"
    when
        A property j:permissionNames has been set on a node
            - the node has the type jnt:role
    then
>       JahiaAccessManager.flushPrivilegesInRoles();
end

rule "Flush privileges in role cache on role deletion"
    when
        A node is deleted
        The node has a parent
            - the parent has the type jnt:roles
    then
>       JahiaAccessManager.flushPrivilegesInRoles();
end

//rule "Flush site key to site id map in jahia group manager routing service on site update"
//    when
//        A property j:siteId has been set on a node
//            - the node has the type jnt:virtualsite
//    then
//>       JahiaGroupManagerRoutingService.getInstance().flushSiteKeyIdMap();
//end

rule "Flush workflow rules cache on update"
    when
        A property has been set on a node
            - the node has the type jnt:workflowRule
    then
        Flush WorkflowRuleCache
end

rule "Flush workflow rules cache on rule deletion"
    when
        A node is deleted
        The node has a parent
            - the parent has the type jnt:workflowRules
    then
        Flush WorkflowRuleCache
end

rule "Flush workflow rules cache on all rules deletion"
    when
        A node is deleted
            - its name is j:workflowRules
    then
        Flush WorkflowRuleCache
end

rule "Ensure only one home page is set"
    when
        A property j:isHomePage has been set on a node
			- the node has the type jnt:page
            - the value is "true"
    then
        Check home page uniqueness for node
end

rule "Flush privileges in role cache"
    when
        A property j:permissionNames has been set on a node
            - the node has the type jnt:role
    then
>       JahiaAccessManager.flushPrivilegesInRoles();
end

rule "Flush external permissions in role cache"
    when
        A property j:permissionNames has been set on a node
            - the node has the type jnt:externalPermissions
    then
>       JahiaAccessManager.flushPrivilegesInRoles();
end
